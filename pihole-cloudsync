#!/bin/bash

###########################################################################
# pihole-cloudsync
# Helper script to keep multiple Pi-holes' lists synchronized via Git

# ORIGINAL AUTHOR
# Steve Jenkins (stevejenkins.com)
# https://github.com/stevejenkins/pihole-cloudsync

# Joel Goguen
# https://github.com/jgoguen/pihole-cloudsync
# * Provide docker support
# * Allow non-master branches

# Jon Stephens
# https://github.com/wetnun/pihole-cloudsync
# * Remove collection of csv files in favor of dump
# * Move import/export to helper functions
# * Allow ENV file so you don't have to edit git files
# * Fix issue of custom whitelist/domains don't work in agents because of groups missing
# * Removed hard tabs, I just don't like them

version='6.0'
update='December 9, 2021'

# SETUP
# Follow the instructions in the README to set up your own private Git
# repository BEFORE running this script for the first time. This script
# will not work without a properly configured Git repo and credentials.

# USAGE: pihole-cloudsync <option>

# OPTIONS:
#  --initpush        Initialize Primary Pi-hole in "Push" mode
#  --initpull        Initialize Secondary Pi-hole in "Pull" mode
#  --push, --upload, --up, -u    Push (upload) your Pi-hole lists to a remote Git repo
#  --pull, --download, --down, -d  Pull (download) your lists from a remote Git repo
#  --help, -h, -?      Show the current version of pihole-cloudsync
#  --version, -v      Show version number

# EXAMPLES:
#  'pihole-cloudsync --push' will push (upload) your lists to a remote Git repo
#  'pihole-cloudsync --pull' will pull (download) your lists from a remote Git repo

# Project Home: https://github.com/stevejenkins/pihole-cloudsync

# Create env.sh file with presets if you don't want to edit this file
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
[ -f "${SCRIPT_DIR}/env.sh" ] && source "${SCRIPT_DIR}/env.sh"

###########################################################################
# CONSTANTS
personal_git_dir="${GIT_CONFIG_DIR:-/usr/local/bin/my-pihole-lists}"
git_branch="${GIT_BRANCH:-master}"
pihole_dir="${PIHOLE_DIR:-/etc/pihole}"
gravity_db="${GRAVITY_DB:-/etc/pihole/gravity.db}"
dnsmasq_dir="${DNSMASQ_DIR:-/etc/dnsmasq.d}"
custom_list="${CUSTOM_LIST:-custom.list}"
cname_list="${CNAME_LIST:-05-pihole-custom-cname.conf}"
###########################################################################
# SHOULDN'T NEED TO EDIT BELOW THIS LINE

# List of DB tables we need to migrate between instances
DB_TABLES="${SYNC_TABLES:-adlist domainlist group domainlist_by_group}"
DB_DUMP_FILE="db_dump.sql"

# Force sudo if not running with root privileges
SUDO=''
if [ "$EUID" -ne 0 ];
  then SUDO='sudo'
fi

# Attempt to detect pihole running in Docker
DOCKER=''
DOCKER_CMD="$(command -v docker)"
JQ_CMD="$(command -v jq)"
if [ -n "${DOCKER_CMD}" ]; then
    CONTAINER="$(${DOCKER_CMD} ps -f "ancestor=pihole/pihole" --format "{{.Names}}")"
    if [ -n "${CONTAINER}" ]; then
        if [ -n "${JQ_CMD}" ]; then
            echo "Found pihole running under Docker container '${CONTAINER}'"

            pihole_dir="$(${DOCKER_CMD} inspect -f "{{json .Mounts}}" "${CONTAINER}" | ${JQ_CMD} -r --arg dir "${pihole_dir}" '.[] | select(.Destination==$dir) | .Source')"
            gravity_db="${pihole_dir}/gravity.db"
            dnsmasq_dir="$(${DOCKER_CMD} inspect -f "{{json .Mounts}}" "${CONTAINER}" | ${JQ_CMD} -r --arg dir "${dnsmasq_dir}" '.[] | select(.Destination==$dir) | .Source')"

            echo "Found pihole directory mapped to '${pihole_dir}'"
            echo "Found dnsmasq directory mapped to '${dnsmasq_dir}'"

            DOCKER="${DOCKER_CMD} exec -i ${CONTAINER}"
        else
            echo "Found Docker container '${CONTAINER}' but jq is not installed"
        fi
    fi
fi

export_tables () {
    $SUDO sqlite3 $gravity_db ".dump --preserve-rowids $DB_TABLES" > $DB_DUMP_FILE
    # sqlite3 doesn't have a drop option, so we inject it after the transaction is generated
    for t in $DB_TABLES; do
        sed -i "/BEGIN TRAN/a DROP TABLE IF EXISTS '$t';" $DB_DUMP_FILE
    done
}

import_tables () {
    $SUDO sqlite3 $gravity_db ".read $DB_DUMP_FILE"
}

# FUNCTIONS
push_initialize () {
    # Go to Pi-hole directory, exit if doesn't exist
    cd $pihole_dir || exit

    # Verify Custom and CNAME lists exist
    $SUDO touch $custom_list
    $SUDO touch $dnsmasq_dir/$cname_list

    # Copy local Custom and CNAME lists to local Git repo
    $SUDO cp $custom_list $personal_git_dir
    $SUDO cp $dnsmasq_dir/$cname_list $personal_git_dir

    # Go to local Git repo directory
    cd $personal_git_dir || exit

    # Export Ad and Domain lists from Gravity database
    export_tables

    # Add all lists to local Git repo
    $SUDO git add .
    echo "Local Pi-hole initialized in Push mode and local lists were added to local Git repo. Run 'pihole-cloudsync --push' to push to remote Git repo.";
}
pull_initialize () {
    # Go to Pi-hole directory, exit if doesn't exist
    cd $personal_git_dir || exit

    # Update local Git repo from remote Git repo
    $SUDO git remote update > /dev/null

    # Remove -q option if you don't want to run in "quiet" mode
    $SUDO git fetch --all -q
    $SUDO git reset --hard "origin/${git_branch}" -q

    # Stop DNS server
    $SUDO ${DOCKER} service pihole-FTL stop

    # Overwrite local files
    $SUDO cp $custom_list $pihole_dir
    $SUDO cp $cname_list $dnsmasq_dir

    # Overwrite local database tables
    $SUDO sqlite3 $gravity_db "DELETE FROM adlist;"
    $SUDO sqlite3 $gravity_db -header -csv ".import --skip 1 adlist.csv adlist"
    if [ -s domainlist.csv ]; then
        $SUDO sqlite3 $gravity_db "DELETE FROM domainlist;"
        $SUDO sqlite3 $gravity_db -header -csv ".import --skip 1 domainlist.csv domainlist"
    fi

    # Restart Pi-hole to pick up changes
    $SUDO ${DOCKER} pihole -g

    # Display success messages
    echo "Local Pi-hole initialized in Pull mode and first pull successfully completed.";
    echo "Future pulls can now be perfomed with 'pihole-cloudsync --pull'.";
}
push () {
     # Go to Pi-hole directory, exit if doesn't exist
    cd $pihole_dir || exit

    # Copy local Custom and CNAME lists to local Git repo
    $SUDO cp $custom_list $personal_git_dir
    $SUDO cp $dnsmasq_dir/$cname_list $personal_git_dir

    # Go to local Git repo directory
    cd $personal_git_dir || exit

    # Export Ad and Domain lists from Gravity database
    export_tables

    # Compare local files to remote Git repo
    $SUDO git remote update > /dev/null

    # If local files are different than remote, update remote Git repo
    CHANGED=$($SUDO git --work-tree=$personal_git_dir status --porcelain)
    if [ -n "${CHANGED}" ]; then
        echo 'Local Pi-hole lists are different than remote Git repo. Updating remote repo...';
        rightnow=$(date +"%B %e, %Y %l:%M%p")
        # Remove -q option if you don't want to run in "quiet" mode
        $SUDO git commit -a -m "Updated $rightnow" -q
        $SUDO git push -q
        echo 'Done!';
        exit 0
    else
        # If local files are the same as remote, do nothing and exit
        echo 'Remote Git repo matches local Pi-hole lists. No further action required.';
        exit 0
    fi
}
pull () {
    # Go to Pi-hole directory, exit if doesn't exist
    cd $personal_git_dir || exit

    # Update local Git repo from remote Git repo
    $SUDO git remote update > /dev/null
    CHANGED=$($SUDO git log HEAD..origin/master --oneline)
    if [ -n "${CHANGED}" ]; then
                echo 'Remote Git repo is different than local Pi-hole lists. Updating local lists...';
                # Remove -q option if you don't want to run in "quiet" mode
                $SUDO git fetch --all -q
        $SUDO git reset --hard origin/master -q
                $SUDO service pihole-FTL stop
                $SUDO cp $custom_list $pihole_dir
                $SUDO cp $cname_list $dnsmasq_dir
                $SUDO sqlite3 $gravity_db "DELETE FROM adlist;"
                $SUDO sqlite3 $gravity_db -header -csv ".import --skip 1 adlist.csv adlist"
                if [ -s domainlist.csv ]; then
                    $SUDO sqlite3 $gravity_db "DELETE FROM domainlist;"
                    $SUDO sqlite3 $gravity_db -header -csv ".import --skip 1 domainlist.csv domainlist"
                fi
        $SUDO pihole -g
                echo 'Done!';
                exit 0
        else
                echo 'Local Pi-hole lists match remote Git repo. No further action required.';
                exit 0
        fi
}
###########################################################################
# Check to see whether a command line option was provided
if [ -z "$1" ];
  then
    echo "Missing command line option. Try --push, --pull, or --help."
    exit 1
fi
# Determine which action to perform (InitPush, InitPull, Push, Pull, or Help)
for arg in "$@"; do
    # Initialize - adds primary Pi-hole's lists to local Git repo before first push/upload
    if [ "$arg" == "--initpush" ];
    then
    echo "$arg option detected. Initializing local Git repo for Push/Upload.";
    push_initialize
    exit 0
    # Initialize - adds primary Pi-hole's lists to local Git repo before first push/upload
    elif [ "$arg" == "--initpull" ];
    then
    echo "$arg option detected. Initializing local Git repo for Pull/Download.";
    pull_initialize
    exit 0
    # Push / Upload - Pushes updated local Pi-hole lists to remote Git repo
    elif [ "$arg" == "--push" ] || [ "$arg" == "--upload" ] || [ "$arg" == "--up" ] || [ "$arg" == "-u" ];
    then
    echo "$arg option detected. Running in Push/Upload mode."
    push
    exit 0
    # Pull / Download - Pulls updated Pi-hole lists from remote Git repo
    elif [ "$arg" == "--pull" ] || [ "$arg" == "--download" ] || [ "$arg" == "--down" ]|| [ "$arg" == "-d" ];
    then
        echo "$arg option detected. Running in Pull/Download mode."
        shift
        [ -n "$1" ] && git_branch="$1"
        pull
        exit 0
    # Help - Displays help dialog
    elif [ "$arg" == "--help" ] || [ "$arg" == "-h" ] || [ "$arg" == "-?" ];
    then
    cat << EOF
Usage: pihole-cloudsync <option>

        Options:
            --push, --upload, --up, -u               Push (upload) your Pi-hole lists to a remote Git repo
            --pull, --download, --down, -d [branch]  Pull (download) your lists from a remote Git repo
            --initpush                 Initialize Primary Pi-hole in "Push" mode
            --initpull [branch]        Initialize Secondary Pi-hole in "Pull" mode with optional branch (default: master)
            --help, -h, -?       Show this help dialog
            --version, -v        Show the current version of pihole-cloudsync

        Examples:
            'pihole-cloudsync --push' will push (upload) your lists to a Git repo
            'pihole-cloudsync --pull' will pull (download) your lists from a Git repo from origin/master
            'pihole-cloudsync --pull main' will pull (download) your lists from a Git repo from origin/main

        Project Home: https://github.com/stevejenkins/pihole-cloudsync
EOF

    # Version - Displays version number
    elif [ "$arg" == "--version" ] || [ "$arg" == "-v" ];
    then
    echo 'pihole-cloudsync v'$version' - Updated '"$update";
    echo 'https://github.com/stevejenkins/pihole-cloudsync';

    # Invalid command line option was passed
    else
        echo "Invalid command line option. Try --push, --pull, or --help."
        exit 1
    fi
done
